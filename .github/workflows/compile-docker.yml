name: Compile Docker Images

on:
  pull_request:
    types:
      - opened

env:
  AWS_REGION: 'eu-west-2' # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: 'stageup' # set this to your Amazon ECR repository name

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Compile
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'releases/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 13.x
      
      - name: Install Node Dependencies
        run: |
          npm ci
          npm i nx -g

      - name: Build Backend
        run: | 
          npm run build:backend:staging
          

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: $AWS_REGION

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: $ECS_TASK_DEFINITION
      #     container-name: $CONTAINER_NAME
      #     image: ${{ steps.build-image.outputs.image }}

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: $ECS_SERVICE
      #     cluster: $ECS_CLUSTER
      #     wait-for-service-stability: true
